#!/usr/bin/with-contenv bash

set -e

# set some folders and permissions

mkdir -p "$MBDATA" "$PGDATA"
chown abc:abc /data

mkdir -p /run/postgresql /var/log/postgresql
chown -R abc:abc /run/postgresql /var/log/postgresql /app

# initialise empty database structure and change temporary ownership config files
if [ ! -s "$PGDATA/PG_VERSION" ]; then
chown -R abc:abc /data

dumpver=$(curl -s "$URL_ROOT"/LATEST)
DUMP_URL="$URL_ROOT"/"$dumpver"
DUMP_DEST="$MBDATA"/"$dumpver"
mkdir -p "$DUMP_DEST"
chown abc:abc "$DUMP_DEST"
echo "fetching latest dump from musicbrainz, if this section fails try again later as musicbrainz dump may not be fully uploaded 
to their site"

for fetch_file in {mbdump-cdstubs.tar.bz2,mbdump-cover-art-archive.tar.bz2,mbdump-derived.tar.bz2,mbdump-editor.tar.bz2,mbdump-stats.tar.bz2,mbdump.tar.bz2,mbdump-wikidocs.tar.bz2}; do
s6-setuidgid abc curl -o "$DUMP_DEST/$fetch_file" -L -C - "$DUMP_URL/$fetch_file"
done

s6-setuidgid abc psql -h "$POSTGRES_HOST" -U postgres --command "CREATE DATABASE $POSTGRES_DB OWNER $POSTGRES_USER;"  >/dev/null 2>&1
s6-setuidgid abc psql -h "$POSTGRES_HOST" -U postgres --command "ALTER USER $POSTGRES_USER WITH SUPERUSER PASSWORD '$POSTGRES_PASSWORD';"  >/dev/null 2>&1
sleep 5s
echo "BEGINNING INITIAL DATABASE IMPORT ROUTINE, THIS COULD TAKE SEVERAL HOURS AND THE DOCKER MAY LOOK UNRESPONSIVE"
echo "DO NOT STOP DOCKER UNTIL IT IS COMPLETED"

cd /app/musicbrainz || exit
s6-setuidgid abc ./admin/InitDb.pl --createdb --import "$DUMP_DEST"/mbdump*.tar.bz2 --tmp-dir "$DUMP_DEST" --echo
echo "INITIAL IMPORT IS COMPLETE, MOVING TO NEXT PHASE"

set_listen_addresses '*'
sleep 1s
fi

mkdir -p "$PGCONF"
[[ ! -f "$PGCONF"/postgresql.conf ]] && cp "$PGDATA"/postgresql.conf "$PGCONF"/postgresql.conf
chown abc:abc "$PGCONF"/postgresql.conf
chmod 666 "$PGCONF"/postgresql.conf
